/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package CleanUML.impl;

import CleanUML.AggregationKind;
import CleanUML.Association;
import CleanUML.Category;
import CleanUML.Characterization;
import CleanUML.CleanUMLFactory;
import CleanUML.CleanUMLPackage;
import CleanUML.Collective;
import CleanUML.Comment;
import CleanUML.Constraint_;
import CleanUML.Constraint;
import CleanUML.DataType;
import CleanUML.Dependency;
import CleanUML.Derivation;
import CleanUML.ElementImport;
import CleanUML.Enumeration;
import CleanUML.EnumerationLiteral;
import CleanUML.Expression;
import CleanUML.FormalAssociation;
import CleanUML.Generalization;
import CleanUML.GeneralizationSet;
import CleanUML.InstanceSpecification;
import CleanUML.InstanceValue;
import CleanUML.Kind;
import CleanUML.LiteralBoolean;
import CleanUML.LiteralInteger;
import CleanUML.LiteralNull;
import CleanUML.LiteralString;
import CleanUML.LiteralUnlimitedNatural;
import CleanUML.MaterialAssociation;
import CleanUML.Mediation;
import CleanUML.Mixin;
import CleanUML.Mode;
import CleanUML.Model;
import CleanUML.OpaqueExpression;
import CleanUML.PackageImport;
import CleanUML.PackageMerge;
import CleanUML.Phase;
import CleanUML.PrimitiveType;
import CleanUML.Property;
import CleanUML.Quantity;
import CleanUML.Relator;
import CleanUML.Role;
import CleanUML.RoleMixin;
import CleanUML.Slot;
import CleanUML.StringExpression;
import CleanUML.SubKind;
import CleanUML.VisibilityKind;
import CleanUML.componentOf;
import CleanUML.memberOf;
import CleanUML.subCollectionOf;
import CleanUML.subQuantityOf;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CleanUMLFactoryImpl extends EFactoryImpl implements CleanUMLFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static CleanUMLFactory init() {
		try {
			CleanUMLFactory theCleanUMLFactory = (CleanUMLFactory)EPackage.Registry.INSTANCE.getEFactory("CleanUML"); 
			if (theCleanUMLFactory != null) {
				return theCleanUMLFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new CleanUMLFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CleanUMLFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case CleanUMLPackage.COMMENT: return createComment();
			case CleanUMLPackage.PACKAGE: return createPackage();
			case CleanUMLPackage.DEPENDENCY: return createDependency();
			case CleanUMLPackage.ELEMENT_IMPORT: return createElementImport();
			case CleanUMLPackage.PACKAGE_IMPORT: return createPackageImport();
			case CleanUMLPackage.CONSTRAINT_: return createConstraint_();
			case CleanUMLPackage.ASSOCIATION: return createAssociation();
			case CleanUMLPackage.GENERALIZATION: return createGeneralization();
			case CleanUMLPackage.GENERALIZATION_SET: return createGeneralizationSet();
			case CleanUMLPackage.OPAQUE_EXPRESSION: return createOpaqueExpression();
			case CleanUMLPackage.PROPERTY: return createProperty();
			case CleanUMLPackage.CLASS: return createClass();
			case CleanUMLPackage.MODEL: return createModel();
			case CleanUMLPackage.DATA_TYPE: return createDataType();
			case CleanUMLPackage.STRING_EXPRESSION: return createStringExpression();
			case CleanUMLPackage.EXPRESSION: return createExpression();
			case CleanUMLPackage.PACKAGE_MERGE: return createPackageMerge();
			case CleanUMLPackage.ENUMERATION: return createEnumeration();
			case CleanUMLPackage.ENUMERATION_LITERAL: return createEnumerationLiteral();
			case CleanUMLPackage.INSTANCE_SPECIFICATION: return createInstanceSpecification();
			case CleanUMLPackage.SLOT: return createSlot();
			case CleanUMLPackage.PRIMITIVE_TYPE: return createPrimitiveType();
			case CleanUMLPackage.LITERAL_INTEGER: return createLiteralInteger();
			case CleanUMLPackage.LITERAL_STRING: return createLiteralString();
			case CleanUMLPackage.LITERAL_BOOLEAN: return createLiteralBoolean();
			case CleanUMLPackage.LITERAL_NULL: return createLiteralNull();
			case CleanUMLPackage.INSTANCE_VALUE: return createInstanceValue();
			case CleanUMLPackage.LITERAL_UNLIMITED_NATURAL: return createLiteralUnlimitedNatural();
			case CleanUMLPackage.SUB_KIND: return createSubKind();
			case CleanUMLPackage.KIND: return createKind();
			case CleanUMLPackage.QUANTITY: return createQuantity();
			case CleanUMLPackage.COLLECTIVE: return createCollective();
			case CleanUMLPackage.PHASE: return createPhase();
			case CleanUMLPackage.ROLE: return createRole();
			case CleanUMLPackage.CATEGORY: return createCategory();
			case CleanUMLPackage.ROLE_MIXIN: return createRoleMixin();
			case CleanUMLPackage.MIXIN: return createMixin();
			case CleanUMLPackage.MODE: return createMode();
			case CleanUMLPackage.RELATOR: return createRelator();
			case CleanUMLPackage.SUB_QUANTITY_OF: return createsubQuantityOf();
			case CleanUMLPackage.SUB_COLLECTION_OF: return createsubCollectionOf();
			case CleanUMLPackage.MEMBER_OF: return creatememberOf();
			case CleanUMLPackage.COMPONENT_OF: return createcomponentOf();
			case CleanUMLPackage.CHARACTERIZATION: return createCharacterization();
			case CleanUMLPackage.MEDIATION: return createMediation();
			case CleanUMLPackage.DERIVATION: return createDerivation();
			case CleanUMLPackage.FORMAL_ASSOCIATION: return createFormalAssociation();
			case CleanUMLPackage.MATERIAL_ASSOCIATION: return createMaterialAssociation();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case CleanUMLPackage.VISIBILITY_KIND:
				return createVisibilityKindFromString(eDataType, initialValue);
			case CleanUMLPackage.AGGREGATION_KIND:
				return createAggregationKindFromString(eDataType, initialValue);
			case CleanUMLPackage.INTEGER:
				return createIntegerFromString(eDataType, initialValue);
			case CleanUMLPackage.BOOLEAN:
				return createBooleanFromString(eDataType, initialValue);
			case CleanUMLPackage.STRING:
				return createStringFromString(eDataType, initialValue);
			case CleanUMLPackage.UNLIMITED_NATURAL:
				return createUnlimitedNaturalFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case CleanUMLPackage.VISIBILITY_KIND:
				return convertVisibilityKindToString(eDataType, instanceValue);
			case CleanUMLPackage.AGGREGATION_KIND:
				return convertAggregationKindToString(eDataType, instanceValue);
			case CleanUMLPackage.INTEGER:
				return convertIntegerToString(eDataType, instanceValue);
			case CleanUMLPackage.BOOLEAN:
				return convertBooleanToString(eDataType, instanceValue);
			case CleanUMLPackage.STRING:
				return convertStringToString(eDataType, instanceValue);
			case CleanUMLPackage.UNLIMITED_NATURAL:
				return convertUnlimitedNaturalToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Comment createComment() {
		CommentImpl comment = new CommentImpl();
		return comment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CleanUML.Package createPackage() {
		PackageImpl package_ = new PackageImpl();
		return package_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Dependency createDependency() {
		DependencyImpl dependency = new DependencyImpl();
		return dependency;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ElementImport createElementImport() {
		ElementImportImpl elementImport = new ElementImportImpl();
		return elementImport;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PackageImport createPackageImport() {
		PackageImportImpl packageImport = new PackageImportImpl();
		return packageImport;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Constraint_ createConstraint_() {
		Constraint_Impl constraint_ = new Constraint_Impl();
		return constraint_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Association createAssociation() {
		AssociationImpl association = new AssociationImpl();
		return association;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Generalization createGeneralization() {
		GeneralizationImpl generalization = new GeneralizationImpl();
		return generalization;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GeneralizationSet createGeneralizationSet() {
		GeneralizationSetImpl generalizationSet = new GeneralizationSetImpl();
		return generalizationSet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OpaqueExpression createOpaqueExpression() {
		OpaqueExpressionImpl opaqueExpression = new OpaqueExpressionImpl();
		return opaqueExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Property createProperty() {
		PropertyImpl property = new PropertyImpl();
		return property;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CleanUML.Class createClass() {
		ClassImpl class_ = new ClassImpl();
		return class_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Model createModel() {
		ModelImpl model = new ModelImpl();
		return model;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DataType createDataType() {
		DataTypeImpl dataType = new DataTypeImpl();
		return dataType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StringExpression createStringExpression() {
		StringExpressionImpl stringExpression = new StringExpressionImpl();
		return stringExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Expression createExpression() {
		ExpressionImpl expression = new ExpressionImpl();
		return expression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PackageMerge createPackageMerge() {
		PackageMergeImpl packageMerge = new PackageMergeImpl();
		return packageMerge;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Enumeration createEnumeration() {
		EnumerationImpl enumeration = new EnumerationImpl();
		return enumeration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EnumerationLiteral createEnumerationLiteral() {
		EnumerationLiteralImpl enumerationLiteral = new EnumerationLiteralImpl();
		return enumerationLiteral;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InstanceSpecification createInstanceSpecification() {
		InstanceSpecificationImpl instanceSpecification = new InstanceSpecificationImpl();
		return instanceSpecification;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Slot createSlot() {
		SlotImpl slot = new SlotImpl();
		return slot;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PrimitiveType createPrimitiveType() {
		PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
		return primitiveType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LiteralInteger createLiteralInteger() {
		LiteralIntegerImpl literalInteger = new LiteralIntegerImpl();
		return literalInteger;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LiteralString createLiteralString() {
		LiteralStringImpl literalString = new LiteralStringImpl();
		return literalString;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LiteralBoolean createLiteralBoolean() {
		LiteralBooleanImpl literalBoolean = new LiteralBooleanImpl();
		return literalBoolean;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LiteralNull createLiteralNull() {
		LiteralNullImpl literalNull = new LiteralNullImpl();
		return literalNull;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InstanceValue createInstanceValue() {
		InstanceValueImpl instanceValue = new InstanceValueImpl();
		return instanceValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LiteralUnlimitedNatural createLiteralUnlimitedNatural() {
		LiteralUnlimitedNaturalImpl literalUnlimitedNatural = new LiteralUnlimitedNaturalImpl();
		return literalUnlimitedNatural;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SubKind createSubKind() {
		SubKindImpl subKind = new SubKindImpl();
		return subKind;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Kind createKind() {
		KindImpl kind = new KindImpl();
		return kind;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Quantity createQuantity() {
		QuantityImpl quantity = new QuantityImpl();
		return quantity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collective createCollective() {
		CollectiveImpl collective = new CollectiveImpl();
		return collective;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Phase createPhase() {
		PhaseImpl phase = new PhaseImpl();
		return phase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Role createRole() {
		RoleImpl role = new RoleImpl();
		return role;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Category createCategory() {
		CategoryImpl category = new CategoryImpl();
		return category;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RoleMixin createRoleMixin() {
		RoleMixinImpl roleMixin = new RoleMixinImpl();
		return roleMixin;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Mixin createMixin() {
		MixinImpl mixin = new MixinImpl();
		return mixin;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Mode createMode() {
		ModeImpl mode = new ModeImpl();
		return mode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Relator createRelator() {
		RelatorImpl relator = new RelatorImpl();
		return relator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public subQuantityOf createsubQuantityOf() {
		subQuantityOfImpl subQuantityOf = new subQuantityOfImpl();
		return subQuantityOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public subCollectionOf createsubCollectionOf() {
		subCollectionOfImpl subCollectionOf = new subCollectionOfImpl();
		return subCollectionOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public memberOf creatememberOf() {
		memberOfImpl memberOf = new memberOfImpl();
		return memberOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public componentOf createcomponentOf() {
		componentOfImpl componentOf = new componentOfImpl();
		return componentOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Characterization createCharacterization() {
		CharacterizationImpl characterization = new CharacterizationImpl();
		return characterization;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Mediation createMediation() {
		MediationImpl mediation = new MediationImpl();
		return mediation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Derivation createDerivation() {
		DerivationImpl derivation = new DerivationImpl();
		return derivation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FormalAssociation createFormalAssociation() {
		FormalAssociationImpl formalAssociation = new FormalAssociationImpl();
		return formalAssociation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MaterialAssociation createMaterialAssociation() {
		MaterialAssociationImpl materialAssociation = new MaterialAssociationImpl();
		return materialAssociation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VisibilityKind createVisibilityKindFromString(EDataType eDataType, String initialValue) {
		VisibilityKind result = VisibilityKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertVisibilityKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AggregationKind createAggregationKindFromString(EDataType eDataType, String initialValue) {
		AggregationKind result = AggregationKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertAggregationKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Integer createIntegerFromString(EDataType eDataType, String initialValue) {
		return (Integer)super.createFromString(eDataType, initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertIntegerToString(EDataType eDataType, Object instanceValue) {
		return super.convertToString(eDataType, instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Boolean createBooleanFromString(EDataType eDataType, String initialValue) {
		return (Boolean)super.createFromString(eDataType, initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertBooleanToString(EDataType eDataType, Object instanceValue) {
		return super.convertToString(eDataType, instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String createStringFromString(EDataType eDataType, String initialValue) {
		return (String)super.createFromString(eDataType, initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertStringToString(EDataType eDataType, Object instanceValue) {
		return super.convertToString(eDataType, instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Integer createUnlimitedNaturalFromString(EDataType eDataType, String initialValue) {
		return (Integer)super.createFromString(eDataType, initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertUnlimitedNaturalToString(EDataType eDataType, Object instanceValue) {
		return super.convertToString(eDataType, instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CleanUMLPackage getCleanUMLPackage() {
		return (CleanUMLPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static CleanUMLPackage getPackage() {
		return CleanUMLPackage.eINSTANCE;
	}

} //CleanUMLFactoryImpl
